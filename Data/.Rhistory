LDM <- ddply(LDM, .(MonthYear), transform, HearingCountMonth = sum(Dummy))
# Create Month Only data
LDMonth <- LDM[!duplicated(LDM[, "MonthYear"]), ]
# Clean up
LDMonth <- LDMonth[, c("MonthYear", "MembPresMedian",
"LaughMedian", "MembPresMean",
"LaughMean", "HearingCountMonth")]
#### Excluding Field hearings ####
LDNoF <- subset(LDM, Field == 0)
# Median
LDNoF <- ddply(LDNoF, .(MonthYear), transform, MembPresMedianNoF = median(MembersPres))
LDNoF <- ddply(LDNoF, .(MonthYear), transform, LaughMedianNoF = median(LaughCount))
# Mean
LDNoF <- ddply(LDNoF, .(MonthYear), transform, MembPresMeanNoF = mean(MembersPres))
LDNoF <- ddply(LDNoF, .(MonthYear), transform, LaughMeanNoF = mean(LaughCount))
LDNoF$Dummy <- 1
LDNoF <- ddply(LDNoF, .(MonthYear), transform, HearingCountMonthNoF = sum(Dummy))
# Create Month Only data
LDNoF <- LDNoF[!duplicated(LDNoF[, "MonthYear"]), ]
# Clean up
LDNoF <- LDNoF[, c("MonthYear", "MembPresMedianNoF",
"LaughMedianNoF", "MembPresMeanNoF",
"LaughMeanNoF", "HearingCountMonthNoF")]
# Merge no Field with full Field
LDMonth <- merge(LDMonth, LDNoF, by = "MonthYear")
attach(LDMonth)
LDMonth$HearingCountMonth[is.na(HearingCountMonth)] <- 0
LDMonth$LaughMedian[is.na(LaughMedian)] <- 0
LDMonth$MembPresMedian[is.na(MembPresMedian)] <- 0
LDMonth$LaughMean[is.na(LaughMean)] <- 0
LDMonth$MembPresMean[is.na(MembPresMean)] <- 0
LDMonth$HearingCountMonthNoF[is.na(HearingCountMonthNoF)] <- 0
LDMonth$LaughMedianNoF[is.na(LaughMedianNoF)] <- 0
LDMonth$MembPresMedianNoF[is.na(MembPresMedianNoF)] <- 0
LDMonth$LaughMeanNoF[is.na(LaughMeanNoF)] <- 0
LDMonth$MembPresMeanNoF[is.na(MembPresMeanNoF)] <- 0
detach(LDMonth)
#### ------------ Merge with Testimony Count ------------- ####
TestCount <- read.csv("TestimonyPerMonth.csv", stringsAsFactors = FALSE)
TestCount <- TestCount[, -1]
TestCount$MonthYear <- ymd(TestCount$MonthYear)
# Merge with Main Data
LDMonth <- merge(LDMonth, TestCount, by = "MonthYear", all = TRUE)
LDMonth$MonthTestTotal[is.na(LDMonth$MonthTestTotal)] <- 0
#### ------------ Per Quarter ---------------------------------- ####
# Drop non-fully observed quarters
LDQt <- LDataSub[c(-1, -2), ]
# Create Quarter variable
LDQt$Quarter <- quarter_year(LDQt[, "DateStandard"], with_year = TRUE)
# Median
LDQt <- ddply(LDQt, .(Quarter), transform, MembPresMedian = median(MembersPres))
LDQt <- ddply(LDQt, .(Quarter), transform, LaughMedian = median(LaughCount))
LDQt$Dummy <- 1
LDQt <- ddply(LDQt, .(Quarter), transform, HearingCountQuarter = sum(Dummy))
LDQt <- ddply(LDQt, .(Quarter), transform, FieldCountQuarter = sum(Field))
# Create Month Only data
LDQt <- LDQt[!duplicated(LDQt[, "Quarter"]), ]
# Clean up
LDQt <- LDQt[, c("Quarter", "MembPresMedian",
"LaughMedian", "HearingCountQuarter", "FieldCountQuarter")]
#### ------------ Merge Month Data with economic data --------------------- ####
EconData <- read.csv("FREDEconData.csv")
# Clean
EconData <- EconData[, -1]
EconData <- rename(EconData, c("DateField" = "MonthYear"))
EconData$MonthYear <- ymd(as.character(EconData$MonthYear))
EconData <- EconData[year(EconData$MonthYear) >= 1997,]
# Merge
CombinedMonth <- merge(LDMonth, EconData, by = "MonthYear", all = TRUE)
View(CombinedMonth)
CombinedMonth <- CombinedMonth[c(-1:-5, -196:-200), ]
View(CombinedMonth)
attach(CombinedMonth)
CombinedMonth$HearingCountMonth[is.na(HearingCountMonth)] <- 0
CombinedMonth$LaughMedian[is.na(LaughMedian)] <- 0
CombinedMonth$MembPresMedian[is.na(MembPresMedian)] <- 0
CombinedMonth$LaughMean[is.na(LaughMean)] <- 0
CombinedMonth$MembPresMean[is.na(MembPresMean)] <- 0
CombinedMonth$HearingCountMonthNoF[is.na(HearingCountMonthNoF)] <- 0
CombinedMonth$LaughMedianNoF[is.na(LaughMedianNoF)] <- 0
CombinedMonth$MembPresMedianNoF[is.na(MembPresMedianNoF)] <- 0
CombinedMonth$LaughMeanNoF[is.na(LaughMeanNoF)] <- 0
CombinedMonth$MembPresMeanNoF[is.na(MembPresMeanNoF)] <- 0
CombinedMonth$MonthTestTotal[is.na(MonthTestTotal)] <- 0
detach(CombinedMonth)
View(CombinedMonth)
###############
# Clean Congressional Testimony Laughter Data
# Christopher Gandrud
# 31 May 2013
###############
library(lubridate)
library(DataCombine)
library(plyr)
library(digest)
library(devtools)
# Load quarter_year
source_gist("5500733")
# Set working directory
setwd("~/Dropbox/Fed_Speeches_Paper/FedSpeech/Data")
# Import data
LData <- read.csv("Raw/MonetaryPolicyChron.csv")
#### --------- Clean ----------------------------------------- ####
LDataSub <- LData[, c("Date", "Laughter.Count", "Members.Present",
"Field.hearing", "Fed.SemiAnnual.Oversight.Hearing")]
names(LDataSub) <- c("Date", "LaughCount", "MembersPres", "Field", "Oversight")
# Convert NA to 0 for Oversight/Field
LDataSub$Oversight[is.na(LDataSub$Oversight)] <- 0
LDataSub$Field[is.na(LDataSub$Field)] <- 0
# Clean date
LDataSub$DateStandard <- dmy(as.character(LDataSub$Date))
LDataSub <- LDataSub[order(LDataSub$DateStandard), ]
LDataSub$LaughCount <- as.numeric(LDataSub$LaughCount)
LDataSub$MembersPres <- gsub("[a-zA-Z]", NA, LDataSub$MembersPres)
LDataSub$MembersPres <- as.numeric(LDataSub$MembersPres)
LDataSub <- DropNA(LDataSub, "MembersPres")
LDataSub <- DropNA(LDataSub, "LaughCount")
#### ------------ Per Month ------------------------------------ ####
# Median members per month
LDM <- LDataSub
# Create MonthYear variable
LDM$MonthYear <- floor_date(LDM$DateStandard, "month")
# Medians
LDM <- ddply(LDM, .(MonthYear), transform, MembPresMedian = median(MembersPres))
LDM <- ddply(LDM, .(MonthYear), transform, LaughMedian = median(LaughCount))
# Means
LDM <- ddply(LDM, .(MonthYear), transform, MembPresMean = mean(MembersPres))
LDM <- ddply(LDM, .(MonthYear), transform, LaughMean = mean(LaughCount))
LDM$Dummy <- 1
LDM <- ddply(LDM, .(MonthYear), transform, HearingCountMonth = sum(Dummy))
# Create Month Only data
LDMonth <- LDM[!duplicated(LDM[, "MonthYear"]), ]
# Clean up
LDMonth <- LDMonth[, c("MonthYear", "MembPresMedian",
"LaughMedian", "MembPresMean",
"LaughMean", "HearingCountMonth")]
#### Excluding Field hearings ####
LDNoF <- subset(LDM, Field == 0)
# Median
LDNoF <- ddply(LDNoF, .(MonthYear), transform, MembPresMedianNoF = median(MembersPres))
LDNoF <- ddply(LDNoF, .(MonthYear), transform, LaughMedianNoF = median(LaughCount))
# Mean
LDNoF <- ddply(LDNoF, .(MonthYear), transform, MembPresMeanNoF = mean(MembersPres))
LDNoF <- ddply(LDNoF, .(MonthYear), transform, LaughMeanNoF = mean(LaughCount))
LDNoF$Dummy <- 1
LDNoF <- ddply(LDNoF, .(MonthYear), transform, HearingCountMonthNoF = sum(Dummy))
# Create Month Only data
LDNoF <- LDNoF[!duplicated(LDNoF[, "MonthYear"]), ]
# Clean up
LDNoF <- LDNoF[, c("MonthYear", "MembPresMedianNoF",
"LaughMedianNoF", "MembPresMeanNoF",
"LaughMeanNoF", "HearingCountMonthNoF")]
# Merge no Field with full Field
LDMonth <- merge(LDMonth, LDNoF, by = "MonthYear")
#### ------------ Merge with Testimony Count ------------- ####
TestCount <- read.csv("TestimonyPerMonth.csv", stringsAsFactors = FALSE)
TestCount <- TestCount[, -1]
TestCount$MonthYear <- ymd(TestCount$MonthYear)
# Merge with Main Data
LDMonth <- merge(LDMonth, TestCount, by = "MonthYear", all = TRUE)
#### ------------ Per Quarter ---------------------------------- ####
# Drop non-fully observed quarters
LDQt <- LDataSub[c(-1, -2), ]
# Create Quarter variable
LDQt$Quarter <- quarter_year(LDQt[, "DateStandard"], with_year = TRUE)
# Median
LDQt <- ddply(LDQt, .(Quarter), transform, MembPresMedian = median(MembersPres))
LDQt <- ddply(LDQt, .(Quarter), transform, LaughMedian = median(LaughCount))
LDQt$Dummy <- 1
LDQt <- ddply(LDQt, .(Quarter), transform, HearingCountQuarter = sum(Dummy))
LDQt <- ddply(LDQt, .(Quarter), transform, FieldCountQuarter = sum(Field))
# Create Month Only data
LDQt <- LDQt[!duplicated(LDQt[, "Quarter"]), ]
# Clean up
LDQt <- LDQt[, c("Quarter", "MembPresMedian",
"LaughMedian", "HearingCountQuarter", "FieldCountQuarter")]
#### ------------ Merge Month Data with economic data --------------------- ####
EconData <- read.csv("FREDEconData.csv")
# Clean
EconData <- EconData[, -1]
EconData <- rename(EconData, c("DateField" = "MonthYear"))
EconData$MonthYear <- ymd(as.character(EconData$MonthYear))
EconData <- EconData[year(EconData$MonthYear) >= 1997,]
# Merge
CombinedMonth <- merge(LDMonth, EconData, by = "MonthYear", all = TRUE)
# Drop if outside of Full Hearing and Testimony data
CombinedMonth <- CombinedMonth[c(-1:-5, -196:-200), ]
# Clean combined
attach(CombinedMonth)
CombinedMonth$HearingCountMonth[is.na(HearingCountMonth)] <- 0
CombinedMonth$LaughMedian[is.na(LaughMedian)] <- 0
CombinedMonth$MembPresMedian[is.na(MembPresMedian)] <- 0
CombinedMonth$LaughMean[is.na(LaughMean)] <- 0
CombinedMonth$MembPresMean[is.na(MembPresMean)] <- 0
CombinedMonth$HearingCountMonthNoF[is.na(HearingCountMonthNoF)] <- 0
CombinedMonth$LaughMedianNoF[is.na(LaughMedianNoF)] <- 0
CombinedMonth$MembPresMedianNoF[is.na(MembPresMedianNoF)] <- 0
CombinedMonth$LaughMeanNoF[is.na(LaughMeanNoF)] <- 0
CombinedMonth$MembPresMeanNoF[is.na(MembPresMeanNoF)] <- 0
CombinedMonth$MonthTestTotal[is.na(MonthTestTotal)] <- 0
detach(CombinedMonth)
View(CombinedMonth)
source_gist("5675688")
# Set working directory
setwd("~/Dropbox/Fed_Speeches_Paper/FedSpeech/Data")
MainMonth <- read.csv("MainMonth.csv")
# Rename variables so that they are more legible when plotted
MainMonth <- rename(MainMonth,
c("HearingCountMonthNoF" = "Hearings",
"MembPresMeanNoF" = "Attendance",
"LaughMeanNoF" = "Laughter",
"U6RATE" = "Unemployment",
"GDPC96Percent" = "Growth",
"PCEPIPercent" = "Inflation"
"MonthTestTotal" = "Testimony"))
c("HearingCountMonthNoF" = "Hearings",
"MembPresMeanNoF" = "Attendance",
"LaughMeanNoF" = "Laughter",
"U6RATE" = "Unemployment",
"GDPC96Percent" = "Growth",
"PCEPIPercent" = "Inflation",
"MonthTestTotal" = "Testimony"))
MainMonth <- rename(MainMonth,
c("HearingCountMonthNoF" = "Hearings",
"MembPresMeanNoF" = "Attendance",
"LaughMeanNoF" = "Laughter",
"U6RATE" = "Unemployment",
"GDPC96Percent" = "Growth",
"PCEPIPercent" = "Inflation",
"MonthTestTotal" = "Testimony")
)
View(MainMonth)
###############
# Clean Congressional Testimony Laughter Data
# Christopher Gandrud
# 31 May 2013
###############
library(lubridate)
library(DataCombine)
library(plyr)
library(digest)
library(devtools)
# Load quarter_year
source_gist("5500733")
# Set working directory
setwd("~/Dropbox/Fed_Speeches_Paper/FedSpeech/Data")
# Import data
LData <- read.csv("Raw/MonetaryPolicyChron.csv")
#### --------- Clean ----------------------------------------- ####
LDataSub <- LData[, c("Date", "Laughter.Count", "Members.Present",
"Field.hearing", "Fed.SemiAnnual.Oversight.Hearing")]
names(LDataSub) <- c("Date", "LaughCount", "MembersPres", "Field", "Oversight")
# Convert NA to 0 for Oversight/Field
LDataSub$Oversight[is.na(LDataSub$Oversight)] <- 0
LDataSub$Field[is.na(LDataSub$Field)] <- 0
# Clean date
LDataSub$DateStandard <- dmy(as.character(LDataSub$Date))
LDataSub <- LDataSub[order(LDataSub$DateStandard), ]
LDataSub$LaughCount <- as.numeric(LDataSub$LaughCount)
LDataSub$MembersPres <- gsub("[a-zA-Z]", NA, LDataSub$MembersPres)
LDataSub$MembersPres <- as.numeric(LDataSub$MembersPres)
LDataSub <- DropNA(LDataSub, "MembersPres")
LDataSub <- DropNA(LDataSub, "LaughCount")
#### ------------ Per Month ------------------------------------ ####
# Median members per month
LDM <- LDataSub
# Create MonthYear variable
LDM$MonthYear <- floor_date(LDM$DateStandard, "month")
# Medians
LDM <- ddply(LDM, .(MonthYear), transform, MembPresMedian = median(MembersPres))
LDM <- ddply(LDM, .(MonthYear), transform, LaughMedian = median(LaughCount))
# Means
LDM <- ddply(LDM, .(MonthYear), transform, MembPresMean = mean(MembersPres))
LDM <- ddply(LDM, .(MonthYear), transform, LaughMean = mean(LaughCount))
LDM$Dummy <- 1
LDM <- ddply(LDM, .(MonthYear), transform, HearingCountMonth = sum(Dummy))
# Create Month Only data
LDMonth <- LDM[!duplicated(LDM[, "MonthYear"]), ]
# Clean up
LDMonth <- LDMonth[, c("MonthYear", "MembPresMedian",
"LaughMedian", "MembPresMean",
"LaughMean", "HearingCountMonth")]
#### Excluding Field hearings ####
LDNoF <- subset(LDM, Field == 0)
# Median
LDNoF <- ddply(LDNoF, .(MonthYear), transform, MembPresMedianNoF = median(MembersPres))
LDNoF <- ddply(LDNoF, .(MonthYear), transform, LaughMedianNoF = median(LaughCount))
# Mean
LDNoF <- ddply(LDNoF, .(MonthYear), transform, MembPresMeanNoF = mean(MembersPres))
LDNoF <- ddply(LDNoF, .(MonthYear), transform, LaughMeanNoF = mean(LaughCount))
LDNoF$Dummy <- 1
LDNoF <- ddply(LDNoF, .(MonthYear), transform, HearingCountMonthNoF = sum(Dummy))
# Create Month Only data
LDNoF <- LDNoF[!duplicated(LDNoF[, "MonthYear"]), ]
# Clean up
LDNoF <- LDNoF[, c("MonthYear", "MembPresMedianNoF",
"LaughMedianNoF", "MembPresMeanNoF",
"LaughMeanNoF", "HearingCountMonthNoF")]
# Merge no Field with full Field
LDMonth <- merge(LDMonth, LDNoF, by = "MonthYear")
#### ------------ Merge with Testimony Count ------------- ####
TestCount <- read.csv("TestimonyPerMonth.csv", stringsAsFactors = FALSE)
TestCount <- TestCount[, -1]
TestCount$MonthYear <- ymd(TestCount$MonthYear)
# Merge with Main Data
LDMonth <- merge(LDMonth, TestCount, by = "MonthYear", all = TRUE)
#### ------------ Per Quarter ---------------------------------- ####
# Drop non-fully observed quarters
LDQt <- LDataSub[c(-1, -2), ]
# Create Quarter variable
LDQt$Quarter <- quarter_year(LDQt[, "DateStandard"], with_year = TRUE)
# Median
LDQt <- ddply(LDQt, .(Quarter), transform, MembPresMedian = median(MembersPres))
LDQt <- ddply(LDQt, .(Quarter), transform, LaughMedian = median(LaughCount))
LDQt$Dummy <- 1
LDQt <- ddply(LDQt, .(Quarter), transform, HearingCountQuarter = sum(Dummy))
LDQt <- ddply(LDQt, .(Quarter), transform, FieldCountQuarter = sum(Field))
# Create Month Only data
LDQt <- LDQt[!duplicated(LDQt[, "Quarter"]), ]
# Clean up
LDQt <- LDQt[, c("Quarter", "MembPresMedian",
"LaughMedian", "HearingCountQuarter", "FieldCountQuarter")]
#### ------------ Merge Month Data with economic data --------------------- ####
EconData <- read.csv("FREDEconData.csv")
# Clean
EconData <- EconData[, -1]
EconData <- rename(EconData, c("DateField" = "MonthYear"))
EconData$MonthYear <- ymd(as.character(EconData$MonthYear))
EconData <- EconData[year(EconData$MonthYear) >= 1997,]
# Merge
CombinedMonth <- merge(LDMonth, EconData, by = "MonthYear", all = TRUE)
# Drop if outside of Full Hearing and Testimony data
CombinedMonth <- CombinedMonth[c(-1:-5, -196:-200), ]
# Clean combined
attach(CombinedMonth)
CombinedMonth$HearingCountMonth[is.na(HearingCountMonth)] <- 0
CombinedMonth$LaughMedian[is.na(LaughMedian)] <- 0
CombinedMonth$MembPresMedian[is.na(MembPresMedian)] <- 0
CombinedMonth$LaughMean[is.na(LaughMean)] <- 0
CombinedMonth$MembPresMean[is.na(MembPresMean)] <- 0
CombinedMonth$HearingCountMonthNoF[is.na(HearingCountMonthNoF)] <- 0
CombinedMonth$LaughMedianNoF[is.na(LaughMedianNoF)] <- 0
CombinedMonth$MembPresMedianNoF[is.na(MembPresMedianNoF)] <- 0
CombinedMonth$LaughMeanNoF[is.na(LaughMeanNoF)] <- 0
CombinedMonth$MembPresMeanNoF[is.na(MembPresMeanNoF)] <- 0
CombinedMonth$MonthTestTotal[is.na(MonthTestTotal)] <- 0
detach(CombinedMonth)
#### ---- Save ---- ####
write.csv(CombinedMonth, file = "MainMonth.csv")
write.csv(LDQt, file = "MainQuarter.csv")
setwd("~/Dropbox/Fed_Speeches_Paper/FedSpeech/Data")
MainMonth <- read.csv("MainMonth.csv")
# Rename variables so that they are more legible when plotted
MainMonth <- rename(MainMonth,
c("HearingCountMonthNoF" = "Hearings",
"MembPresMeanNoF" = "Attendance",
"LaughMeanNoF" = "Laughter",
"U6RATE" = "Unemployment",
"GDPC96Percent" = "Growth",
"PCEPIPercent" = "Inflation",
"MonthTestTotal" = "Testimony"))
View(MainMonth)
ScrutVars <- c("Hearings", "Testimony", "Attendance", "Laughter")
e.divGG(data = MainMonth, Vars = ScrutVars, TimeVar = "MonthYear",
sig.lvl = 0.05, R = 799, min.size = 6)
ScrutVars <- c("Hearings", "Testimony", "Attendance", "Laughter")
e.divGG(data = MainMonth, Vars = ScrutVars, TimeVar = "MonthYear",
sig.lvl = 0.05, R = 799, min.size = 2)
e.divGG(data = MainMonth, Vars = ScrutVars, TimeVar = "MonthYear",
sig.lvl = 0.05, R = 799, min.size = 12)
ScrutVars <- c("Hearings", "Testimony", "Attendance", "Laughter")
e.divGG(data = MainMonth, Vars = ScrutVars, TimeVar = "MonthYear",
sig.lvl = 0.05, R = 799, min.size = 6)
ScrutVars <- c("Testimony", "Attendance", "Laughter")
e.divGG(data = MainMonth, Vars = ScrutVars, TimeVar = "MonthYear",
sig.lvl = 0.05, R = 799, min.size = 6)
ScrutVars <- c("Hearings", "Testimony", "Attendance", "Laughter")
e.divGG(data = MainMonth, Vars = ScrutVars, TimeVar = "MonthYear",
sig.lvl = 0.05, R = 799, min.size = 6)
Test <- as.matrix(MainMonth[, "Testimony"])
e.divisive(X = Test, R = 799, min.size = 6)
e.divGG(data = MainMonth, Vars = "Testimony", TimeVar = "MonthYear",
sig.lvl = 0.05, R = 799, min.size = 6)
e.divGG(data = MainMonth, Vars = "Testimony", TimeVar = "MonthYear",
sig.lvl = 0.05, R = 799, min.size = 6)
e.divGG <- function(data, Vars, TimeVar, sig.lvl = 0.05, R = 199, eps = 1e-3, half = 1000, k = NULL, min.size = 30, alpha = 1, PlotVars = NULL, Facet = TRUE, palette = "Set1", leg.name = "")
{
# Load required packages
require(ecp)
require(reshape2)
require(ggplot2)
require(gridExtra)
# Create T x d matrix
DataMatrix <- data[, Vars]
# Estimate change points
CP <- e.divisive(X = DataMatrix, sig.lvl = sig.lvl, R = R, eps = eps, half = half,
k = k, min.size = min.size, alpha = alpha)
CP
}
e.divGG(data = MainMonth, Vars = "Testimony", TimeVar = "MonthYear",
sig.lvl = 0.05, R = 799, min.size = 6)
#'
#' @source James N.A., Matteson D.S. (2013). ecp: An R Package for Nonparametric Multiple Change Point Analysis of Multivariate Data.
#'
e.divGG <- function(data, Vars, TimeVar, sig.lvl = 0.05, R = 199, eps = 1e-3, half = 1000, k = NULL, min.size = 30, alpha = 1, PlotVars = NULL, Facet = TRUE, palette = "Set1", leg.name = "")
{
# Load required packages
require(ecp)
require(reshape2)
require(ggplot2)
require(gridExtra)
# Create T x d matrix
DataMatrix <- data[, Vars]
DataMatrix
}
e.divGG(data = MainMonth, Vars = "Testimony", TimeVar = "MonthYear",
sig.lvl = 0.05, R = 799, min.size = 6)
Test
#' Function for creating nonparamentric multiple change point plots with estimates from the ecp package.
#'
#' @param data A data frame with the covariates and time variable.
#' @param Vars A character vector listing the names of the variates from \code{data} to include in the nonparametric multiple change point analysis.
#' @param TimeVar A character string naming the time variable in \code{data}.
#' @param sig.lvl The level at which to sequentially test if a proposed change point is statistically significant.
#' @param eps The uniform error bound used in the implementation of the permutaiton test as outlined in Gandy (2009).
#' @param half A constant used to control the epsilon spending rate. Futher details can be found in Gandy (2009).
#' @param R The maximum number of random permutations to use in each iteration of the permutaiton test. The permutation test p-value is calculated usign the method outlined in Gandy (2009).
#' @param k Number of change point locations to estimate, surpressing the permutation based testing. If \code{k=NULL} then only the statistically significant estimated change points are returned.
#' @param PlotVars A character string of the variables from the analysis to plot.
#' @param Facet Logical. If \code{TRUE} then each variable will be given its own plot. If \code{FALSE} then values from all of the variables in \code{Var} will be plotted on the same figure.
#' @param palette If a string, it will use that named palette. If a number, will index into the list of palettes of appropriate type,
#' @param leg.name A character string. If \code{Facet = FALSE}, it allows you to specify the legend name.
#'
#' @return a ggplot2 object
#'
#' @details Uses \code{\link{e.divisive}} to run a nonparametric multiple chang point analysis (James and Matteson, 2013) on variables in a data frame. It then uses \code{\link{ggplot2}} to plot the variable values with vertical dashed lines indicating the estimated change points.
#'
#' @source James N.A., Matteson D.S. (2013). ecp: An R Package for Nonparametric Multiple Change Point Analysis of Multivariate Data.
#'
e.divGG <- function(data, Vars, TimeVar, sig.lvl = 0.05, R = 199, eps = 1e-3, half = 1000, k = NULL, min.size = 30, alpha = 1, PlotVars = NULL, Facet = TRUE, palette = "Set1", leg.name = "")
{
# Load required packages
require(ecp)
require(reshape2)
require(ggplot2)
require(gridExtra)
# Create T x d matrix
DataMatrix <- as.matrix(data[, Vars])
# Estimate change points
CP <- e.divisive(X = DataMatrix, sig.lvl = sig.lvl, R = R, eps = eps, half = half,
k = k, min.size = min.size, alpha = alpha)
# Extract change points
CPEstimates <- CP$estimates
# Remove first and last points (these are the first and last values of the matrix)
CPEstSub <- CPEstimates[c(-1, -length(CPEstimates))]
if (length(CPEstSub) == 0){
stop("No change points found.")
}
#Find corresponding TimeVar value
CPTimes <- as.POSIXct(data[CPEstSub, TimeVar])
# Report estimates
CPMessage <- lapply(CPTimes, function(x) paste(x, "\n"))
message("Change points estimated at:")
message(CPMessage)
# Melt data frame so that it can be plotted
if (!is.null(PlotVars)){
DataSub <- data[, c(TimeVar, PlotVars)]
DataMolten <- melt(data = DataSub, id.vars = TimeVar, measure.vars = PlotVars)
}
else if (is.null(PlotVars)){
DataSub <- data[, c(TimeVar, Vars)]
DataMolten <- melt(data = DataSub, id.vars = TimeVar, measure.vars = Vars)
}
# Clean pre plotting
names(DataMolten) <- c("Time", "GroupVar", "Value")
DataMolten$Time <- as.POSIXct(DataMolten$Time)
DataMolten <- merge(DataMolten, CPTimes, all = TRUE)
names(DataMolten) <- c("Time", "GroupVar", "Value", "Lines")
DataMolten$Lines[DataMolten$Time != DataMolten$Lines] <- NA
# Plot
if (Facet == FALSE){
ggplot(data = DataMolten, aes(x = Time, y = Value, group = GroupVar,
colour = GroupVar)) +
geom_line() +
geom_vline(aes(xintercept = as.numeric(Lines)), linetype = "longdash") +
scale_colour_brewer(palette = palette, name = leg.name) +
xlab("") + ylab("") +
theme_bw()
}
else if (Facet == TRUE){
eachVar <- unique(DataMolten$GroupVar)
p <- list()
for (i in eachVar){
SubData <- subset(DataMolten, GroupVar == i)
p[[i]] <-   ggplot(data = SubData,
aes(x = Time, y = Value)) +
geom_line() +
geom_vline(aes(xintercept = as.numeric(Lines)),
linetype = "longdash", colour = "#DE2D26") +
xlab("") + ylab("") + ggtitle(paste(i, "\n")) +
theme_bw()
}
do.call(grid.arrange, p)
}
}
e.divGG(data = MainMonth, Vars = "Testimony", TimeVar = "MonthYear",
sig.lvl = 0.05, R = 799, min.size = 6)
e.divGG(data = MainMonth, Vars = "Testimony", TimeVar = "MonthYear",
sig.lvl = 0.05, R = 799, min.size = 6, Facet = FALSE)
lenght(Test)
length(Test)
ncol(Test)
